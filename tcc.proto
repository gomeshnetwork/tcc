syntax = "proto3";

package tcc;

option go_package = "github.com/gomeshnetwork/tcc";

enum TxStatus {
  Created = 0;
  Locked = 1;
  Confirmed = 2;
  Canceled = 3;
  Timeout = 4;
}

message NewTxRequest {
  string txid = 1; // parent txid
}

message NewTxResponse {
  string txid = 2; // root txid or child txid
}

message CommitTxRequest {
  string txid = 1; // txid
}

message CommitTxResponse {}

message CancelTxRequest {
  string txid = 1; //  txid
}

message CancelTxResponse {}

message BeginLockResourceRequest {
  string txid = 1;
  string rid = 2;
  string agent = 3;
  string resource = 4;
}

message BeginLockResourceRespose {}

message EndLockResourceRequest {
  string txid = 1;
  string rid = 2;
  string agent = 3;
  string resource = 4;
}

message EndLockResourceRespose {}

enum AgentCommand {
  COMMMIT = 0;
  Cancel = 1;
}

message AgentCommandRequest {
  string txid = 1;
  string resource = 2;
  AgentCommand command = 3;
}

message AttachAgentRequest { string agent = 1; }

message ResourceStatusChangedRequest {
  string txid = 1;
  string resource = 2;
  TxStatus status = 3;
  string agent = 4;
}

message ResourceStatusChangedRespose {}

service Engine {
  rpc NewTx(NewTxRequest) returns (NewTxResponse);
  rpc Commit(CommitTxRequest) returns (CommitTxResponse);
  rpc Cancel(CancelTxRequest) returns (CancelTxResponse);
  rpc BeginLockResource(BeginLockResourceRequest)
      returns (BeginLockResourceRespose);
  rpc EndLockResource(EndLockResourceRequest) returns (EndLockResourceRespose);
  rpc ResourceStatusChanged(ResourceStatusChangedRequest)
      returns (ResourceStatusChangedRespose);
  rpc AttachAgent(AttachAgentRequest) returns (stream AgentCommandRequest);
}